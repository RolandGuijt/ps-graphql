schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  products: [ProductModel]
  product(id: Int!): ProductModel
  reviews(productId: Int!): [ProductReviewModel]
}

type Mutation {
  addProductReview(review: ProductReviewModelInput): ProductReviewModel
}

type Subscription {
  onReviewAdded: ProductReviewModel
}

"The built-in `Decimal` scalar type."
scalar Decimal

type ProductModel {
  id: Int!
  name: String
  type: ProductTypeEnum!
  description: String
  price: Decimal!
  stock: Int!
  rating: Int!
  introducedAt: DateTime!
  photoFileName: String
  productReviews: [ProductReviewModel]
  totalStockValue: Decimal!
  reviewsById: [ProductReviewModel]
}

input ProductReviewModelInput {
  id: Int
  productId: Int!
  title: String
  review: String
}

type ProductReviewModel {
  id: Int
  productId: Int!
  title: String
  review: String
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

enum ProductTypeEnum {
  BOOTS
  CLIMBING_GEAR
  KAYAKS
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION